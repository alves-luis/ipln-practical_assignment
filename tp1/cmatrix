#!/usr/bin/env python3

from tabulate import tabulate
import sys
from getopt import getopt
import fileinput
import re

# Verifies the integrity of the command, and checks whether it has all the
# necessary arguments and options, and if they're "valid enough"
def parse_command():
    opts, remainder = getopt(sys.argv[1:],'ABP')

    if (2 < len(opts) or len(opts) < 1):
        raise Exception('You need to specify 1 direction! Choose -A for after, -B for before!')
    if (len(remainder) != 3):
        raise Exception('Invalid number of arguments! You need to specify 3 arguments (besides the option)!')

    flag = False
    if ('-P','') in opts:
        flag=True

    if (opts[0][0]== '-P'):
        direction = opts[1][0]
    else:
        direction = opts[0][0]

    word = remainder[1]
    filename = remainder[2]

    try:
        num = int(remainder[0])
    except ValueError:
        raise Exception('Invalid number of most common words! Please use cmatrix -A|B <num> <word> <filename>')

    return (direction, word, num, filename, flag)

# Add a sentence to the expression dict
def update_expression_counter(sentence, expressions_dic):
    if (tuple(sentence) in expressions_dic):
        expressions_dic[tuple(sentence)] += 1
    else:
        expressions_dic[tuple(sentence)] = 1

# Given a word and a dictionary, updates the number of ocurrences
# in that dictionary
def update_word_counter(word, word_dic):
    if (word in word_dic):
        word_dic[word] += 1
    else:
        word_dic[word] = 1

# given a filename, a word and a direction,
# returns a dictionary with the the count of words that come after or before
# the given word
def process_text(filename, word, d, flag):
    word_counter = {}
    expression_counter = {}

    fd = open(filename, 'r')
    file = fd.read()

    if flag:
        file=re.sub(r"([,?!.;])","",file)

    file=re.sub(r"([,;])","",file)

    if (d == '-A'):
        for match in re.findall(rf'{word}((?:\s+[\w\-]+){{1,2}})', file):
            sentence = match.split()
            word = sentence[0]
            update_word_counter(word, word_counter)
            update_expression_counter(sentence, expression_counter)

    elif (d == '-B'):
        for match in re.findall(rf'((?:[\w\-]+\s+){{1,2}}){word}', file):
            sentence = match.split()
            word = sentence[len(sentence) - 1]
            update_word_counter(word, word_counter)
            update_expression_counter(sentence, expression_counter)

    fd.close()
    return (word_counter, expression_counter)

# Add the given expression formated to be printed
def append(rows, expression, expression_counter, word):
    str_expression = ' '.join(expression)
    to_append = f'{str_expression} ({expression_counter[expression]})'
    if word in rows:
        rows[word].append(to_append)
    else:
        rows[word] = [to_append]

def print_result(word, word_counter, expression_counter, num, direction):
    # Sort to get the most common word from the counter dict
    sorted_words = sorted(word_counter, key=word_counter.get, reverse=True)[:num]

    header = [word]
    rows = {word:""}

    # Generates the result header (truncated to n)
    for i in range(0, min(num,len(sorted_words))):
        header.append(f'{sorted_words[i]} ({word_counter[sorted_words[i]]})')

    # Sort to get the most common expression on the dict
    sorted_expressions = sorted(expression_counter, key=expression_counter.get, reverse=True)

    # Filter all expressions to those that are used in the most common words
    for word in sorted_words:
        for expression in sorted_expressions:
            if direction == '-A':
                if expression[0] == word:
                    append(rows, expression, expression_counter, word)
            else:
                if expression[len(expression) - 1] == word:
                    append(rows, expression, expression_counter, word)

    print(tabulate(rows,headers=header,tablefmt="fancy_grid"))

try:
    direction, word, num, filename, flag = parse_command()
    word_count, expression_count = process_text(filename, word, direction,flag)
    print_result(word, word_count, expression_count, num, direction)
except Exception as e:
    print(e)
