#!/usr/bin/env python3

from tabulate import tabulate
import sys
from getopt import getopt
import fileinput
import re

# Verifies the integrity of the command, and checks whether it has all the
# necessary arguments and options, and if they're "valid enough"
def parse_command():
    opts, remainder = getopt(sys.argv[1:],'AB')

    if (len(opts) != 1):
        raise Exception('You need to specify 1 direction! Choose -A for after, -B for before!')
    if (len(remainder) != 3):
        raise Exception('Invalid number of arguments! You need to specify 3 arguments (besides the option)!')

    direction = opts[0][0]
    word = remainder[1]
    filename = remainder[2]

    try:
        num = int(remainder[0])
    except ValueError:
        raise Exception('Invalid number of most common words! Please use cmatrix -A|B <num> <word> <filename>')

    return (direction, word, num, filename)

# Add a sentence to the expression dict
def add_expression(sentence, expression):
    if (tuple(sentence) in expression ):
        expression[tuple(sentence)] += 1
    else:
        expression[tuple(sentence)] = 1

# Given a word and a dictionary, updates the number of ocurrences
# in that dictionary
def update_word_counter(word, counter):
    if (word in counter):
        counter[word] += 1
    else:
        counter[word] = 1

# given a filename, a word and a direction,
# returns a dictionary with the the count of words that come after or before
# the given word
def process_text(filename, word, d):
    counter = {}
    fd = open(filename, 'r')
    file = fd.read()
    if (d == '-A'):
        for match in re.findall(rf'{word}((?:\s+\w+){{1,2}})', file):
            sentence = match.split()
            word = sentence[0]
            update_word_counter(word, counter)
            add_expression(sentence, expression)
    elif (d == '-B'):
        for match in re.findall(rf'((?:\w+\s+){{1,2}}){word}', file):
            sentence = match.split()
            word = sentence[len(sentence) - 1]
            update_word_counter(word, counter)
            add_expression(sentence, expression)
    fd.close()
    return counter

# Add the current expression formated to be printed
def append(r,e,expression,i):
    if i in r:
        r[i].append(' '.join(e)  + " (" + str(expression[e]) + ")")
    else:
        r[i] = [(' '.join(e)  + " (" + str(expression[e]) + ")")]


def get_result(word,counter,expression,num,letter):
    # Sort to get the most common word from the counter dict
    resultado = sorted(counter, key=counter.get, reverse=True)[:num]

    x = [word]
    r = {word:""}

    # Add the most common words to the list x
    for e in range(0,min(num,len(resultado))):
        x.append(resultado[e] + " (" + str(counter[resultado[e]]) + ")")

    # Sort to get the most common expression on the dict
    resultadoLista = sorted(expression, key=expression.get, reverse=True)

    # Filter all expressions to those that are used in the most common words
    for i in resultado:
        for e in resultadoLista:
            if letter == '-A':
                if e[0] == i:
                    append(r,e,expression,i)
            else:
                if len(e) > 1:
                    if e[1] == i:
                        append(r,e,expression,i)
                else:
                    if e[0] == i:
                        append(r,e,expression,i)
    print(tabulate(r,headers=x,tablefmt="fancy_grid"))

expression = {}

try:
    direction, word, num, filename = parse_command()
    word_count = process_text(filename, word, direction)
    get_result(word,word_count,expression,num,direction)
except Exception as e:
    print(e)
